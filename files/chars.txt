⁰	wrap the top same type items on the stack in an array
¹-⁹	context & input & program dependant variables.<br>from 1 onwards are loop data. The outermost loop has ¹, inner one - ², ect. Every loop might set other values it uses in further ones.<br>Helper functions are in order below `⁹`<br>before the last helpers superscript come the inputs<br>If unset, defaults: //KEYW //SUB ⁰¹²³⁴⁵⁶⁷⁸⁹
  ¹: Infinity
  ²: 256
  ³: 13
  ⁴: 64
  ⁵: 11
  ⁶: 12
  ⁷: 16
  ⁸: 128
  ⁹: call main program
  ¹-x: loop counters & stuff
  
＋	add / join horizontally
  NN: add the numbers
    `７８＋` → 15
  aa: add the two items together horizontally
    `hello¶worl∙ ¶d!＋` → "hello  ¶worl d!"
－	subtract
  `５９－` → -4
（	start an array wrapping
  `１２（３４５）` → 1, 2, [3, 4, 5]
）	end array wrapping. （ can be implicit
［	loop
  N: repeat that many times (not pushing anything)
    `６７２［!＋Ｐ` → "7!¶6!"
  S: for each prefix
    `abc［Ｐ` → "a¶ab¶abc"
  A: for each prefix
    `１２３）［!＋］`
］	close a loop as map
  `hello｛[ŗ]］∑` → "[h][e][l][l][o]"
｛	loop
  N: repeat from 1 to that number, pushing the counter
    `３｛a×Ｐ` → "a¶aa¶aaa"
  S: for each character, pushing it
    `abc｛-ｐｐ` → "-a-b-c"
  a: for each character
    `ab¶c｛!＋Ｏ` → "a!¶b!¶c!¶ !"
    `ab¶c｛Ｕ］` → "AB¶C "
  A: for each item, pushing it
｝	close a loop
＜	less than
  NN: less than
    `４６＜` → 1
＞	greater than
  NN: greater than
    `２７＞` → 0
‰	
ø	push an empty art object //KEYW new canvas object
  `ø３｛１hi╋` → "hhhi"
＾	power
  NN: x^y
    `Ａ３＾` → 1000
◂	push "0123456789"
  `◂` → "0123456789" //TEST
◂◂	push ["1234567890","qwertyuiop","asdfghjkl","zxcvbnm"]
  `◂◂` → ["1234567890","qwertyuiop","asdfghjkl","zxcvbnm"] //TEST
←	
↑	
→	
↓	
↖	
↗	
↘	
↙	
↔	mirror horizontally
  S, A: mirror horizontally - reverse & swap chars as required
    `\_/-↔` → "-\_/"
↕	mirror vertically
  S, a: mirror vertically - reverse vertically & swap chars as required
    `_/¶ v↕` → "_^¶ \"
  N: floor divide by 2 + 1
    `５↕` → 3
    `６↕` → 4
    

┌	duplicate the item 2nd from top
  `１２３┌）` → [1,2,3,2]
┐	pop & remove an item
  `１２３┐）` → [1,2]
└	swap the two items below ToS
  `１２３└）` → [2,1,3]
┘	put the 3rd item from top ontop //KEYW get swap
  `１２３┘）` → [2,3,1]
├	double increment / uppercase first letter
  N: increase by 2
    `７├` → 9
  S: uppercase the first letter of the first word
    `   hello, world!├` → "   Hello, world!"
  A: vectorize
┤	double decrement
  N: decrease by 2
    `０┤` → -2
  S: cast to number
  A: put all the elements on the stack
┬	decode from base 10
  NN: convert x from base 10 to an array of digits of it in base y
    `Ａ２┬` → [1,0,1,0]
┴	encode into base 10
  AN: convert the array, interpreted as base y, to a base 10 number
  `１０１０）２┴` → 10
╴	previous input
╵	increment / sentence case
  N: increase by 1
    `７╷` → 8 //TEST
  S: uppercase every letter after any of ".?!" and in the beginning
    `  hello, world! goodbye, world!╵` → "  Hello, world! Goodbye, world!"
  A: vectorize
╶	next input
╷	decrement / title case
  N: decrease by 1
    `７╷` → 6 //TEST
  S: uppercase the first letter of every word
    `hello, world!╷` → "Hello, World!"
  A: vectorize
╋	overlap / replace
  SSS: replace in the first the second with the third
  aaNN: overlap the 2nd art over the 1st at x;y using smartOverlap
╋╋	simple overlap
  aaNN: overlap the 2nd art over the 1st at x;y using simpleOverlap
×	repeat horizontally / prepend
  NN: multiply the numbers
    `６７×` → 42
  NA, AN, SN, NS: repeat horizontally
    `string３×` → "stringstringstring"
    `hello¶world!２×` → "hello hello ¶world!world!"
    `hello∙world!）２×` → ["hello hello ", "world!world!"]
  aa: reverse join / prepend //KEYW reverse add
    `World!∙Hello, ×` → "Hello, World!"
＊	repeat vertically / join string
  SN, NS: repeat the string vertically that many times
    `foo¶bar３＊` → "foo¶bar¶foo¶bar¶foo¶bar"
  NA, AN: multiply the array vertically that many times
    `a∙b）２＊` → ["a","b","a","b"]
  aNN: expand the ascii-art by the numbers
    `foo¶bar２３＊` → "ffoooo¶ffoooo¶ffoooo¶bbaarr¶bbaarr¶bbaarr"
  AS, SA: join the array with the string
    `３Ｒ:＊` → "1:2:3"
  SS: insert the second string between the firsts chars
    `2xy∙^＊` → "2^x^y"
÷	divide
  NN: divide the numbers
    `３４÷`
±	horizontal reverse / negate
  N: negate
    `４±` → -4
  a: reverse horizontally
    `\abc/±` → "/cba\"
    `abc∙(def)）±` → ["  cba", ")fed("]
«	shift left
  N: shift left by 1 bit / multiply by 2
    `６«` → 12
  S: put the first char at the end
    `hello«` → "elloh"
  A: put the first item at the end
    `１２３）«` → [2,3,1]
»	shift right
  N: shift right by 1 bit / floor divide by 2, storing the remainder
    `７»` → 3
    `８»` → 4
  S: put the last char at the beginning
    `hello»` → "ohell"
  A: put the last item at the beginning
    `１２３）«` → [2,3,1]
≤	
≥	
≡	equal
≠	not equal
Ａ	push 10
Ｂ	
Ｃ	push the ASCII characters (' '..'~')
Ｄ	deduplicate
  `１３２３４１）Ｄ` → [1,3,2,4]
Ｅ	eval pop as Canvas code
  `５“２＋”ｗＥｙＥ` → 9
Ｆ	
Ｇ	
Ｈ	
Ｉ	
Ｊ	pop the first item / first line
  `helloＪ` → "ello", "h"
Ｋ	pop the last item / last line
`helloＪ` → "hell", "o"
Ｌ	get length
  S, A, N: get length and pop the item
    `helloＬ）` → [5]
    `‾⁹Ｌ）` → [2]
  a: get width, don't pop
    `a¶bcdefＬ` → 5
Ｍ	maximum
  NN: maximum
    `８４Ｍ` → 8
Ｎ	
Ｒ	range / set default background
  N: range from 1 to N, inclusive
    `４Ｒ` → [1,2,3,4]
  S: set the default background to the string
    `.Ｒø２２+╋` → "..¶.+"
Ｓ	split on spaces
  S: split on spaces
    `hi thereＳ` → ["hi", "there"]
Ｕ	uppercase/ceiling
  S: uppercase the string
    `HiＵ` → "HI"
  N: get the ceiling of the number
    `５½Ｕ` → 3
  A: vectorize
ｕ	lowercase/floor
  S: lowercase the string
    `Hiｕ` → "hi"
  N: get the floor of the number
    `５½ｕ` → 2
  A: vectorize
Ｖ	increment x
  `３｛Ｖ］ｘ` → 3
Ｗ	while
  ｝: do..while(pop)
    `helloＷＫｌ；Ｏ｝` → "o¶l¶l¶e¶h"
  ］: while(ToS)
    `５Ｗ╷Ｔ］` → "4¶3¶2¶1¶0"
Ｚ	push the uppercase alphabet
  `Ｚ` → "ABCDEFGHIJKLMNOPQRSTUVWXYZ" //TEST
ａ	
ｂ	
ｃ	convert to/from unicode
  N: convert from unicode codepoint
    `Ａ６×ｃ` → "<"
  S: convert to unicode codepoint
    `hｃ` → 104
    `helloｃ` → [104, 101, 108, 108, 111] //NOTE (note that this only happens if length>1, be careful)
  A: convert to 2D array of codepoints
    `ab¶cｃ` → [[97, 98], [99, 0]]
ｄ	
ｅ	encase in a letter
  SS: encase the 1st string in the 2nd
    `hello∙'ｅ` → "'hello'"
ｆ	
ｇ	push the last remainder
  `５⇵ｇ）` → [3,1]
ｈ	
ｉ	
ｊ	remove first item / first line
  `helloｊ）` → ["ello"]
ｋ	remove last item / last line
  `helloｋ）` → ["hell"]
ｌ	get length
  S, A, N: get length, without popping
    `helloｌ）` → ["hello", 5]
  a: get height, don't pop
ｍ	mold to length / reshape
  aN: reshape to the width of the number
    `abc８ｍ` → "abcabcab"
  NN: minimum
    `４７ｍ` → 4
ｎ	split into chunks / divmod
  NS, SN: split the string into chunks of length N
    `hello２ｎ` → ["he","ll", "o"]
  NA, AN: split the array into arrays of length N. If there aren't enough items, just leave as-is.
    `１２３４５６）４ｎ` → [[1,2,3,4],[5,6]]
  NN: push the result of floor division and then modulo
    `７３ｎ）` → [2, 1]
  aa: overlap the two
    `--∙|¶|ｎ` → "+-¶| "
ｒ	lowered range / set background / center
  N: range from 0 to N-1, inclusive
    `４ｒ` → [0,1,2,3]
  aS: set the arts background character to that
    `ø.ｒ２２+╋` → "..¶.+"
  a: center the art, preferring to go left
    `a¶bc¶defgｒ` → " a  ¶ bc ¶defg"
ｓ	split
  SS: split the 1st string on the 2nd
    `hello∙elｓ` → ["h", "lo"]
  SN: split the string on the number
ｖ	increment/append
  N: increment x & push the result
    `hi!｛ｖ］` → ["h",1,"i",2,"!",3]
  S: add the value to X
    `”Ｘabc｛!＋ｖ｝ｘ` → "a!b!c!"
  A: push the value to X
ｗ	set the variable Y without popping
  `fooＹｙbarｗｙ）` → ["foo", "bar", "bar"]
ｘ	get the value of the variable X
ｙ	get the value of the variable Y
Ｘ	set the variable X to POP
Ｙ	set the variable Y to POP
ｚ	push the lowercase alphabet
  `ｚ` → "abcdefghijklmnopqrstuvwxyz" //TEST
//   newline   pop   disable auto output
// Ｏ	  x       x                       
// Ｐ	  x       x        x              
// Ｑ	  x                                
// Ｔ	  x                x                
// ｏ	          x                        
// ｐ	          x        x                
// ｑ	                                  
// ｔ	                   x               

Ｏ	output in a new line, popping the item
Ｐ	output in a new line, popping the item
Ｑ	output in a new line
Ｔ	output in a new line, disabling implicit output
ｏ	output in the current line, popping the item
ｐ	output in the current line, popping the item
ｑ	output in the current line
ｔ	output in the current line, disabling implicit output
０-９	push that number (０１２３４５６７８９) //KEYW 0 1 2 3 4 5 6 7 8 9 //SUB ０１２３４５６７８９
‼	normalize
  N: 1 if the number isn't 0, otherwise 0
  S: 0 if the string is empty, otherwise 1
  a: move the [1;1] point to the top-left of the visible art
¼	
½	halve //KEYW half halve
  N: divide by 2
    `９½` → 4.5
¾	
√	square root
  N: get the square root
    `９２√×Ｕ` → 13
／	create an antidiagonal
  N: create a antidiagonal of that length
    `２／` → " /¶/ "
  S: create a antidiagonal of the characters of that string
    `ab／` → " a¶b "
  a: prepend each line with one less space than the last, the last line having 0 spaces
    `ab¶cd¶ef／` → "  ab¶ cd ¶ef  "
＼	create a diagonal
  N: create a diagonal of that length
    `２＼` → "\ ¶ \"
  S: create a diagonal of the characters of that string
    `ab＼` → "a ¶ b"
  a: prepend each line with one more space than the last, the first having 0 spaces
    `ab¶cd¶ef＼` → "ab  ¶ cd ¶  ef"
∑	join/sum
  A: join the array together or sum if array only contains numbers
    `（（ab∙cd）（ef∙gh））∑` → "abcdefgh"
    `４Ｒ∑` → 10
    `５Ｒ｛Ｒ］∑` → 35
  N, S: join the stack until `（` or end into a string
∙	NOP / separator / space
  NOOP if both or no sides are ASCII
    `abc∙def┐` → "abc"
  if ASCII is only on one side, pushes a space
    `abc∙＊` → "a b c"
‽	if not / switch
  ｝: if not POP
    `‽false!｝` - if POP is falsy //NOTTEST
  ］: switch over the results before `］`, calling the one to its right. The last case, without a `］`, is the default result
    `‽N∙n］north｝S∙s］south｝E∙e］east｝west｝` - expands the direction name of the cardinal //NOTTEST
？	if/switch
  ｝: if
    `？truthy!｝` pushes "truthy" if the input is truthy //NOTTEST
  ］｝: switch for numbers 0..x. first is default, next is 0 (or anything falsy), next - 1, next - 2, ect.<br>If only 2 blocks are used, this is basically if/else.
    `？truthy!］falsy.｝` outputs "truthy" if the input is truthy //NOTTEST
    `？not zero nor one］zero］one｝` self explanatory //NOTTEST
‾	1-char number constant
⇵	reverse vertically
  N: ceiling divide by 2, storing the remainder
    `７⇵` → 4
  A: reverse the items
    `１２）hello（７world））⇵` → [[7,"world"], "hello", [1,2]]
  a: reverse vertically
：	duplicate ToS
  `la：＋` → "lala"
⌐	duplicate POP twice //KEYW triplicate
  `la⌐）∑` → "lalala"
；	swap top two stack items
  `４９；－` → 5
⟳	rotate clockwise w/o character changing
  a: rotate clockwise once
    `i∙h!∔⟳` → "hi¶! "
  aN: rotate clockwise that many times
  A, AN: rotate the items so that it looks rotated if printed
⤢	transpose / absolute value
  a: transpose
    `ab¶cd⤢` → "ac¶bd"
  N: absolute value
    `４⤢` → 4
    `４±⤢` → 4
∔	add vertically / reverse subtract
  NN: reverse subtract
    `４７∔` → 3
  SS: add the two together with a separating newline
    `abc∙de∔` → "abc¶de "
  AS: move the string into the array
    `a３Ｒ∔` → ["a", 1, 2, 3]
    `３Ｒa∔` → [1, 2, 3, "a"]
  AA: add the two arrays together
    `２Ｒ３Ｒ∔` → [1, 2, 1, 2, 3]
  aa: add the two vertically
    `ab¶cd∙1¶2∔` → "ab¶cd¶1 ¶2 "
ŗ	replace in a string with pop
    `World∙Hello, ŗ!` → "Hello, World!"
“	string starter
    `“ｈｉ` → "ｈｉ"
”	string ender
    `ｈｉ”` → "ｈｉ"
    `ａｂｃ”１２”）` → ["ａｂｃ", "１２"]
„	compressed number (ctrl+O → number compress to generate)
‟	compressed string ender (ctrl+O → string compress to generate)
↶	rotate anticlockwise
  a: rotate counter clockwise, rotating characters that make sense to be rotated
    `//¶/↶` → "\ ¶\\"
  aN: rotate anticlockwise that many times
    `abc¶d２↶` → "  d¶cba"
↷	rotate clockwise
  a: rotate clockwise, rotating characters that make sense to be rotated
    `//¶/↷` → "\\¶ \"
  aN: rotate clockwise that many times
    `abc¶d２↷` → "  d¶cba"
    
＠	get item
  AN, NA: push that item (1-indexed) from the array
    `９８７）５＠` → 8
  SN, NS: push that char (1-indexed) from the string
    `Ｚ４＠` → "D"
    `AB５＠` → "A"
  aNN: get the character at the positions [x; y] in the canvas
    `AB¶CD２２＠` → "D"
  aNNNN: get a subsection from the canvas by the params [x; y; w; h]
    `Ｚ５ｎ２２３３＠` → "GHI¶LMN¶QRS"
＃	execute as JS
    `"Hello, "+"JS!"＃` → "Hello, JS!"
％	modulo
  NN: modulo
    `８３％` → 2
！	
α	get the second to last argument used in a simpleFunction //KEYW history
    `７３÷１％α；－` → 2 //NOTE (floor division implementation)
ω	get the last argument used in a simpleFunction //KEYW history
    `７３÷αω％ω÷－` → 2 //NOTE (floor division implementation)

─	palindromize vertically with 1 overlap
═	palindromize vertically with 0 overlap
│	palindromize horizontally with 1 overlap
║	palindromize horizontally with 0 overlap
┼	quad-palindromize with 1 overlap
╬	quad-palindromize with 0 overlap
╫	quad-palindromize with 1 overlap vertically and 0 horizontally
╪	quad-palindromize with 0 overlap vertically and 1 horizontally
two of the same palindromizators next to each other disable character mirroring
if after a double-line there's a character with that as a single line, it's replaced by a remainder.
So ╫│ is vertical palindromization with overlap 1 and horizontal with overlap of the remainder
╬┼	quad palindromize with remainder overlap
  `３⇵-×：↷ｎ╬┼` → "+-+¶| |¶+-+"
  `４⇵-×：↷ｎ╬┼` → "+--+¶|  |¶|  |¶+--+"



